name: spa-admin-$(Build.SourceBranchName)-$(rev:rso)

trigger:
  - main
  - develop
  - release

pr:
  - main
  - develop
  - release

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: isDevelop
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  - name: isRelease
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/release')]
  - name: isHotfix
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')]
  - name: isFeature
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')]

stages:
  - stage: build
    displayName: 'Build'
    jobs:
      - job: build
        steps:
          - task: NodeTool@0
            displayName: 'Use Node 14.15.0'
            inputs:
              versionSpec: 14.15.0

          - bash: 'npm install npm@6.13.4 -g'
            displayName: 'Update npm'
            enabled: true

          - task: Npm@1
            displayName: 'npm install'
            inputs:
              verbose: false

          - task: Npm@1
            displayName: 'npm build dev'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run build --server=dev'

          - task: ArchiveFiles@2
            displayName: 'Archive files dev'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/build'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/spa-admin.zip'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: spa-admin-dev'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/spa-admin.zip'
              ArtifactName: 'spa-admin-dev'

          - bash: 'rm -rf $(System.DefaultWorkingDirectory)/build'
            displayName: 'clean build dir'

          - task: Npm@1
            displayName: 'npm build qa'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run build --server=qa'

          - task: ArchiveFiles@2
            displayName: 'Archive files qa'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/build'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/spa-admin.zip'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: spa-admin-qa'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/spa-admin.zip'
              ArtifactName: 'spa-admin-qa'

          - bash: 'rm -rf $(System.DefaultWorkingDirectory)/build'
            displayName: 'clean build dir'

          - task: Npm@1
            displayName: 'npm build prod'
            inputs:
              command: custom
              verbose: false
              customCommand: 'run build --server=prod'

          - task: ArchiveFiles@2
            displayName: 'Archive files prod'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/build'
              includeRootFolder: false
              archiveFile: '$(Build.ArtifactStagingDirectory)/spa-admin.zip'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: spa-admin-prod'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/spa-admin.zip'
              ArtifactName: 'spa-admin-prod'

  - stage: deploydev
    displayName: 'Deploy to DEV'
    condition: and(or(eq(variables.isFeature, true), eq(variables.isDevelop, true)), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn: [build]
    variables:
      - group: creds-dev
      - name: webAppName
        value: 'evntmgmt-webapp-dev'
      - name: artifactName
        value: 'spa-admin-dev'
    jobs:
      - deployment: app
        displayName: 'Deploy to DEV'
        pool:
          vmImage: 'windows-2019'
        environment: DEV
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadPipelineArtifact@2
                displayName: 'Download $(artifactName)'
                inputs:
                  artifact: $(artifactName)
                  path: $(System.DefaultWorkingDirectory)/$(artifactName)

              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy spa-admin'
                inputs:
                  azureSubscription: 'lixar-dev'
                  appType: webApp
                  WebAppName: '$(webAppName)'
                  Package: '$(System.DefaultWorkingDirectory)/$(artifactName)/**/*.zip'
                  VirtualApplication: /Admin
                  enableCustomDeployment: true
                  RemoveAdditionalFilesFlag: true
                  ExcludeFilesFromAppDataFlag: false
                  RenameFilesFlag: false

  - stage: deployqa
    displayName: 'Deploy to QA'
    condition: and(succeeded(), or(eq(variables.isRelease, true), eq(variables.isHotfix, true)))
    dependsOn: [build]
    variables:
      - group: creds-qa
      - name: webAppName
        value: 'evntmgmt-webapp-qa'
      - name: artifactName
        value: 'spa-admin-qa'
    jobs:
      - deployment: app
        displayName: 'Deploy to QA'
        pool:
          vmImage: 'windows-2019'
        environment: QA
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadPipelineArtifact@2
                displayName: 'Download $(artifactName)'
                inputs:
                  artifact: $(artifactName)
                  path: $(System.DefaultWorkingDirectory)/$(artifactName)

              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy spa-admin'
                inputs:
                  azureSubscription: 'lixar-qa'
                  appType: webApp
                  WebAppName: '$(webAppName)'
                  Package: '$(System.DefaultWorkingDirectory)/$(artifactName)/**/*.zip'
                  VirtualApplication: /Admin
                  enableCustomDeployment: true
                  RemoveAdditionalFilesFlag: true
                  ExcludeFilesFromAppDataFlag: false
                  RenameFilesFlag: false

  - stage: deployprod
    displayName: 'Deploy to Prod'
    condition: and(succeeded(), eq(variables.isMain, true))
    dependsOn: [build]
    variables:
      - group: creds-prod
      - name: webAppName
        value: 'evntmgmt-webapp-prod'
      - name: artifactName
        value: 'spa-admin-prod'
    jobs:
      - deployment: app
        displayName: 'Deploy to Prod'
        pool:
          vmImage: 'windows-2019'
        environment: PROD
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadPipelineArtifact@2
                displayName: 'Download $(artifactName)'
                inputs:
                  artifact: $(artifactName)
                  path: $(System.DefaultWorkingDirectory)/$(artifactName)

              - task: AzureRmWebAppDeployment@4
                displayName: 'Azure App Service Deploy spa-admin'
                inputs:
                  azureSubscription: 'lixar-prod'
                  appType: webApp
                  WebAppName: '$(webAppName)'
                  Package: '$(System.DefaultWorkingDirectory)/$(artifactName)/**/*.zip'
                  VirtualApplication: /Admin
                  enableCustomDeployment: true
                  RemoveAdditionalFilesFlag: true
                  ExcludeFilesFromAppDataFlag: false
                  RenameFilesFlag: false
